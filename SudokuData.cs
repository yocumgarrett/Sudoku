using System.Collections;
using System.Collections.Generic;
using UnityEngine;

//This class contain the data for specific, pre-made puzzles.
public class EasySudoku : MonoBehaviour
{
    static string[] easy_titles = new string[11] {
        "69 (1)",
        "69 (2)",
        "69 (3)",
        "Flower",
        "Snowflake",
        "69 (4)",
        "X",
        "Easy G",
        "Spagoo",
        "Penis Broccoli",
        "Small Chicken"
    };

    public static List<SudokuData.SudokuBoardData> getData()
    {
        List<SudokuData.SudokuBoardData> data = new List<SudokuData.SudokuBoardData>();

        // 69 (1)
        // Easy, time = 1:45, 1 star
        data.Add(new SudokuData.SudokuBoardData(
            easy_titles[0], 1f,

            new int[81] {1, 0, 2, 0, 3, 0, 4, 0, 0,
                         0, 6, 0, 0, 0, 0, 0, 9, 0,
                         4, 0, 9, 2, 0, 0, 3, 1, 6,
                         0, 0, 0, 0, 0, 7, 0, 5, 0,
                         7, 5, 3, 0, 0, 1, 0, 0, 0,
                         0, 1, 0, 0, 0, 0, 8, 6, 0,
                         2, 9, 6, 3, 4, 0, 0, 0, 0,
                         0, 3, 0, 0, 1, 6, 0, 0, 2,
                         0, 0, 0, 0, 0, 2, 6, 0, 9,},
            
            new int[81] {1, 8, 2, 6, 3, 9, 4, 7, 5,
                         3, 6, 5, 1, 7, 4, 2, 9, 8,
                         4, 7, 9, 2, 5, 8, 3, 1, 6,
                         6, 2, 8, 4, 9, 7, 1, 5, 3,
                         7, 5, 3, 8, 6, 1, 9, 2, 4,
                         9, 1, 4, 5, 2, 3, 8, 6, 7,
                         2, 9, 6, 3, 4, 5, 7, 8, 1,
                         8, 3, 7, 9, 1, 6, 5, 4, 2,
                         5, 4, 1, 7, 8, 2, 6, 3, 9,}));

        // 69 (2)
        // Easy, time = 3, 2 star
        data.Add(new SudokuData.SudokuBoardData(
            easy_titles[1], 2f,

            new int[81] {0, 0, 0, 2, 0, 5, 0, 1, 0,
                         6, 4, 2, 0, 9, 0, 0, 0, 0,
                         0, 0, 9, 0, 6, 0, 0, 0, 0,
                         0, 8, 0, 0, 7, 0, 0, 9, 0,
                         9, 2, 4, 5, 8, 3, 0, 0, 0,
                         0, 0, 0, 0, 1, 0, 0, 2, 3,
                         0, 0, 3, 0, 0, 1, 0, 6, 0,
                         0, 5, 0, 8, 0, 0, 0, 3, 1,
                         0, 9, 0, 0, 0, 0, 0, 4, 2,},

            new int[81] {8, 3, 7, 2, 4, 5, 6, 1, 9,
                         6, 4, 2, 1, 9, 8, 3, 5, 7,
                         5, 1, 9, 3, 6, 7, 2, 8, 4,
                         3, 8, 1, 6, 7, 2, 4, 9, 5,
                         9, 2, 4, 5, 8, 3, 1, 7, 6,
                         7, 6, 5, 9, 1, 4, 8, 2, 3,
                         2, 7, 3, 4, 5, 1, 9, 6, 8,
                         4, 5, 6, 8, 2, 9, 7, 3, 1,
                         1, 9, 8, 7, 3, 6, 5, 4, 2,}));

        // 69 (3)
        // Easy-ish, 4 mins, 3 star
        data.Add(new SudokuData.SudokuBoardData(
            easy_titles[2], 3f,

            new int[81] {9, 0, 0, 0, 0, 0, 0, 0, 1,
                         0, 0, 0, 4, 2, 0, 0, 0, 0,
                         0, 7, 0, 0, 5, 6, 4, 0, 2,
                         2, 0, 0, 8, 7, 0, 0, 0, 6,
                         6, 0, 0, 0, 0, 0, 0, 7, 0,
                         4, 0, 0, 3, 0, 0, 0, 0, 5,
                         0, 0, 1, 5, 0, 8, 0, 0, 0,
                         0, 3, 0, 0, 0, 0, 0, 9, 0,
                         0, 0, 0, 0, 0, 2, 0, 0, 4,},

            new int[81] {9, 2, 4, 7, 8, 3, 5, 6, 1,
                         3, 6, 5, 4, 2, 1, 9, 8, 7,
                         1, 7, 8, 9, 5, 6, 4, 3, 2,
                         2, 1, 9, 8, 7, 5, 3, 4, 6,
                         6, 5, 3, 2, 1, 4, 8, 7, 9,
                         4, 8, 7, 3, 6, 9, 2, 1, 5,
                         7, 4, 1, 5, 9, 8, 6, 2, 3,
                         5, 3, 2, 6, 4, 7, 1, 9, 8,
                         8, 9, 6, 1, 3, 2, 7, 5, 4,}));

        // Flower (1)
        // Super Easy, 1.5 min, 0.5 star
        data.Add(new SudokuData.SudokuBoardData(
            easy_titles[3], 0.5f,

            new int[81] {0, 0, 3, 4, 5, 6, 7, 0, 0,
                         0, 0, 6, 0, 0, 9, 1, 0, 0,
                         7, 8, 0, 0, 0, 0, 0, 5, 6,
                         2, 3, 0, 0, 6, 0, 0, 0, 7,
                         5, 0, 0, 8, 0, 7, 0, 0, 1,
                         8, 0, 0, 0, 3, 0, 0, 6, 4,
                         3, 1, 0, 0, 0, 0, 0, 7, 8,
                         0, 0, 5, 9, 0, 0, 3, 0, 0,
                         0, 0, 8, 3, 1, 2, 6, 0, 0,},

            new int[81] {1, 2, 3, 4, 5, 6, 7, 8, 9,
                         4, 5, 6, 7, 8, 9, 1, 2, 3,
                         7, 8, 9, 1, 2, 3, 4, 5, 6,
                         2, 3, 1, 5, 6, 4, 8, 9, 7,
                         5, 6, 4, 8, 9, 7, 2, 3, 1,
                         8, 9, 7, 2, 3, 1, 5, 6, 4,
                         3, 1, 2, 6, 4, 5, 9, 7, 8,
                         6, 4, 5, 9, 7, 8, 3, 1, 2,
                         9, 7, 8, 3, 1, 2, 6, 4, 5,}));

        // Snowflake (1)
        // Super Easy, 1 min, 0.5 star
        data.Add(new SudokuData.SudokuBoardData(
            easy_titles[4], 0.5f,

            new int[81] {1, 2, 0, 4, 0, 6, 7, 8, 0,
                         4, 0, 6, 7, 0, 9, 1, 0, 3,
                         0, 8, 9, 1, 0, 3, 0, 5, 6,
                         2, 3, 1, 0, 0, 0, 8, 9, 7,
                         0, 0, 0, 0, 0, 0, 0, 0, 0,
                         8, 9, 7, 0, 0, 0, 5, 6, 4,
                         3, 1, 0, 6, 0, 5, 9, 7, 0,
                         6, 0, 5, 9, 0, 8, 3, 0, 2,
                         0, 7, 8, 3, 0, 2, 0, 4, 5,},

            new int[81] {1, 2, 3, 4, 5, 6, 7, 8, 9,
                         4, 5, 6, 7, 8, 9, 1, 2, 3,
                         7, 8, 9, 1, 2, 3, 4, 5, 6,
                         2, 3, 1, 5, 6, 4, 8, 9, 7,
                         5, 6, 4, 8, 9, 7, 2, 3, 1,
                         8, 9, 7, 2, 3, 1, 5, 6, 4,
                         3, 1, 2, 6, 4, 5, 9, 7, 8,
                         6, 4, 5, 9, 7, 8, 3, 1, 2,
                         9, 7, 8, 3, 1, 2, 6, 4, 5,}));

        // 69 (4)
        // Easy, 3 min 40 sec, 2 stars
        data.Add(new SudokuData.SudokuBoardData(
            easy_titles[5], 2f,

            new int[81] {0, 0, 0, 0, 4, 3, 0, 2, 1,
                         6, 0, 0, 2, 0, 0, 0, 0, 0,
                         9, 0, 0, 0, 0, 0, 0, 0, 0,
                         2, 0, 1, 0, 7, 9, 3, 0, 0,
                         0, 0, 4, 0, 0, 0, 0, 8, 0,
                         3, 0, 7, 0, 0, 0, 0, 0, 0,
                         0, 0, 0, 3, 0, 0, 0, 4, 0,
                         0, 0, 0, 8, 0, 7, 0, 0, 0,
                         0, 0, 0, 0, 1, 5, 0, 6, 9,},

            new int[81] {8, 7, 5, 9, 4, 3, 6, 2, 1,
                         6, 4, 3, 2, 5, 1, 9, 7, 8,
                         9, 1, 2, 7, 6, 8, 4, 3, 5,
                         2, 8, 1, 6, 7, 9, 3, 5, 4,
                         5, 9, 4, 1, 3, 2, 7, 8, 6,
                         3, 6, 7, 5, 8, 4, 1, 9, 2,
                         1, 5, 9, 3, 2, 6, 8, 4, 7,
                         4, 2, 6, 8, 9, 7, 5, 1, 3,
                         7, 3, 8, 4, 1, 5, 2, 6, 9,}));

        // X
        // Easy, 2.5 mins, 2 stars
        data.Add(new SudokuData.SudokuBoardData(
            easy_titles[6], 2f,

            new int[81] {4, 1, 0, 0, 0, 0, 0, 2, 0,
                         0, 3, 0, 0, 0, 9, 0, 4, 0,
                         0, 0, 5, 0, 0, 0, 6, 0, 0,
                         0, 0, 0, 7, 0, 8, 0, 0, 0,
                         7, 8, 0, 0, 9, 0, 0, 0, 2,
                         2, 0, 0, 6, 0, 5, 0, 0, 1,
                         0, 0, 8, 0, 0, 2, 7, 0, 0,
                         0, 4, 0, 0, 0, 1, 0, 3, 0,
                         0, 2, 0, 0, 0, 0, 0, 1, 0,},

            new int[81] {4, 1, 6, 3, 8, 7, 9, 2, 5,
                         8, 3, 2, 5, 6, 9, 1, 4, 7,
                         9, 7, 5, 2, 1, 4, 6, 8, 3,
                         6, 5, 1, 7, 2, 8, 3, 9, 4,
                         7, 8, 4, 1, 9, 3, 5, 6, 2,
                         2, 9, 3, 6, 4, 5, 8, 7, 1,
                         1, 6, 8, 4, 3, 2, 7, 5, 9,
                         5, 4, 9, 8, 7, 1, 2, 3, 6,
                         3, 2, 7, 9, 5, 6, 4, 1, 8,}));

        // Easy G
        // Easy, 3 mins, 1.5 stars
        data.Add(new SudokuData.SudokuBoardData(
            easy_titles[7], 1.5f,

            new int[81] {0, 0, 0, 3, 5, 0, 6, 0, 0,
                         0, 0, 8, 0, 1, 0, 0, 7, 0,
                         0, 2, 0, 0, 0, 0, 0, 0, 9,
                         0, 5, 0, 0, 0, 0, 0, 0, 0,
                         0, 7, 2, 0, 0, 0, 0, 0, 0,
                         0, 6, 0, 0, 0, 8, 9, 1, 0,
                         0, 8, 1, 0, 0, 6, 5, 0, 0,
                         0, 0, 0, 9, 0, 0, 2, 0, 0,
                         0, 0, 0, 5, 7, 1, 3, 0, 0,},

            new int[81] {4, 1, 7, 3, 5, 9, 6, 8, 2,
                         5, 9, 8, 6, 1, 2, 4, 7, 3,
                         6, 2, 3, 8, 4, 7, 1, 5, 9,
                         8, 5, 9, 1, 6, 3, 7, 2, 4,
                         1, 7, 2, 4, 9, 5, 8, 3, 6,
                         3, 6, 4, 7, 2, 8, 9, 1, 5,
                         9, 8, 1, 2, 3, 6, 5, 4, 7,
                         7, 3, 5, 9, 8, 4, 2, 6, 1,
                         2, 4, 6, 5, 7, 1, 3, 9, 8,}));

        // Spagoo
        // Easy, 2 mins, 1 star
        data.Add(new SudokuData.SudokuBoardData(
            easy_titles[8], 1f,

            new int[81] {0, 1, 2, 0, 0, 0, 3, 0, 0,
                         0, 4, 0, 0, 0, 6, 0, 8, 0,
                         0, 0, 0, 0, 8, 0, 4, 0, 0,
                         0, 2, 0, 9, 0, 0, 0, 0, 1,
                         0, 0, 0, 7, 1, 0, 0, 2, 0,
                         6, 8, 0, 0, 0, 3, 0, 0, 5,
                         0, 0, 3, 4, 0, 0, 0, 0, 0,
                         1, 5, 0, 0, 0, 0, 0, 0, 7,
                         7, 0, 0, 0, 0, 0, 0, 5, 0,},

            new int[81] {8, 1, 2, 5, 9, 4, 3, 7, 6,
                         3, 4, 9, 1, 7, 6, 5, 8, 2,
                         5, 7, 6, 3, 8, 2, 4, 1, 9,
                         4, 2, 7, 9, 6, 5, 8, 3, 1,
                         9, 3, 5, 7, 1, 8, 6, 2, 4,
                         6, 8, 1, 2, 4, 3, 7, 9, 5,
                         2, 9, 3, 4, 5, 7, 1, 6, 8,
                         1, 5, 8, 6, 3, 9, 2, 4, 7,
                         7, 6, 4, 8, 2, 1, 9, 5, 3,}));

        // Penis Broccoli
        // Easy, 3 min 40 secs, 2.5 stars
        data.Add(new SudokuData.SudokuBoardData(
            easy_titles[9], 2.5f,

            new int[81] {1, 0, 4, 9, 0, 0, 0, 3, 0,
                         0, 0, 0, 1, 4, 0, 0, 6, 0,
                         0, 0, 7, 0, 5, 0, 0, 9, 0,
                         0, 0, 5, 0, 0, 0, 0, 0, 7,
                         0, 0, 0, 0, 0, 0, 9, 0, 0,
                         0, 0, 0, 7, 8, 1, 0, 0, 2,
                         0, 0, 0, 3, 0, 2, 0, 0, 0,
                         8, 0, 0, 0, 0, 9, 0, 0, 0,
                         0, 6, 9, 5, 0, 0, 0, 1, 0,},

            new int[81] {1, 5, 4, 9, 2, 6, 7, 3, 8,
                         9, 3, 8, 1, 4, 7, 2, 6, 5,
                         6, 2, 7, 8, 5, 3, 1, 9, 4,
                         3, 1, 5, 2, 9, 4, 6, 8, 7,
                         7, 8, 2, 6, 3, 5, 9, 4, 1,
                         4, 9, 6, 7, 8, 1, 3, 5, 2,
                         5, 4, 1, 3, 6, 2, 8, 7, 9,
                         8, 7, 3, 4, 1, 9, 5, 2, 6,
                         2, 6, 9, 5, 7, 8, 4, 1, 3,}));

        // Small Chicken
        // Easy, X min, 3 stars
        data.Add(new SudokuData.SudokuBoardData(
            easy_titles[10], 2.5f,

            new int[81] {2, 0, 0, 0, 0, 1, 0, 6, 0,
                         0, 7, 1, 0, 0, 0, 0, 4, 0,
                         0, 3, 4, 8, 0, 0, 0, 0, 9,
                         0, 0, 0, 2, 0, 0, 9, 1, 0,
                         0, 0, 0, 0, 6, 0, 0, 0, 0,
                         0, 0, 0, 0, 0, 9, 5, 0, 2,
                         0, 0, 0, 0, 0, 6, 0, 0, 0,
                         9, 0, 2, 0, 8, 0, 0, 3, 7,
                         0, 6, 0, 3, 7, 5, 0, 0, 0,},

            new int[81] {2, 9, 5, 4, 3, 1, 7, 6, 8,
                         8, 7, 1, 6, 9, 2, 3, 4, 5,
                         6, 3, 4, 8, 5, 7, 1, 2, 9,
                         5, 8, 7, 2, 4, 3, 9, 1, 6,
                         1, 2, 9, 5, 6, 8, 4, 7, 3,
                         3, 4, 6, 7, 1, 9, 5, 8, 2,
                         7, 1, 3, 9, 2, 6, 8, 5, 4,
                         9, 5, 2, 1, 8, 4, 6, 3, 7,
                         4, 6, 8, 3, 7, 5, 2, 9, 1,}));

        return data;
    }
}

public class HardSudoku : MonoBehaviour
{
    static string[] hard_titles = new string[7] {
        "3per",
        "02-Feb-2022",
        "Diagonal Pi",
        "Rows 29",
        "13 Going on Flirty",
        "Two Towers",
        "Catfish Stew"
    };

    public static List<SudokuData.SudokuBoardData> getData()
    {
        List<SudokuData.SudokuBoardData> data = new List<SudokuData.SudokuBoardData>();

        // 3per
        // Hard, 4 mins, 4 star
        data.Add(new SudokuData.SudokuBoardData(
            hard_titles[0], 4f,

            new int[81] {0, 7, 4, 0, 5, 0, 0, 0, 6,
                         0, 5, 0, 0, 3, 0, 0, 2, 0,
                         0, 0, 0, 0, 0, 1, 0, 0, 4,
                         8, 3, 0, 0, 9, 0, 1, 0, 0,
                         0, 0, 0, 0, 7, 8, 0, 0, 0,
                         0, 0, 0, 0, 0, 0, 0, 0, 3,
                         0, 4, 0, 8, 0, 9, 0, 0, 7,
                         6, 0, 2, 0, 0, 0, 3, 0, 0,
                         0, 0, 0, 0, 1, 0, 5, 0, 0,},

            new int[81] {1, 7, 4, 9, 5, 2, 8, 3, 6,
                         9, 5, 8, 4, 3, 6, 7, 2, 1,
                         2, 6, 3, 7, 8, 1, 9, 5, 4,
                         8, 3, 6, 2, 9, 4, 1, 7, 5,
                         5, 2, 1, 3, 7, 8, 4, 6, 9,
                         4, 9, 7, 1, 6, 5, 2, 8, 3,
                         3, 4, 5, 8, 2, 9, 6, 1, 7,
                         6, 1, 2, 5, 4, 7, 3, 9, 8,
                         7, 8, 9, 6, 1, 3, 5, 4, 2,}));

        // 02-Feb-2022
        // Hard, 3.3 mins, 3 stars
        data.Add(new SudokuData.SudokuBoardData(
            hard_titles[1], 3f,

            new int[81] {1, 0, 0, 0, 0, 0, 0, 7, 2,
                         0, 7, 2, 0, 0, 0, 0, 0, 0,
                         3, 0, 6, 4, 0, 0, 0, 0, 0,
                         0, 5, 3, 0, 0, 0, 1, 0, 4,
                         0, 0, 0, 5, 0, 0, 0, 0, 9,
                         0, 1, 0, 8, 0, 6, 0, 0, 0,
                         0, 0, 0, 0, 5, 0, 9, 0, 0,
                         8, 0, 7, 0, 0, 0, 6, 0, 0,
                         0, 0, 0, 1, 9, 0, 0, 4, 0,},

            new int[81] {1, 4, 9, 3, 6, 5, 8, 7, 2,
                         5, 7, 2, 9, 8, 1, 4, 3, 6,
                         3, 8, 6, 4, 7, 2, 5, 9, 1,
                         6, 5, 3, 7, 2, 9, 1, 8, 4,
                         7, 2, 8, 5, 1, 4, 3, 6, 9,
                         9, 1, 4, 8, 3, 6, 2, 5, 7,
                         4, 3, 1, 6, 5, 7, 9, 2, 8,
                         8, 9, 7, 2, 4, 3, 6, 1, 5,
                         2, 6, 5, 1, 9, 8, 7, 4, 3,}));

        // Diagonal Pi
        // Hard, 5 mins, 4 stars
        data.Add(new SudokuData.SudokuBoardData(
            hard_titles[2], 4f,

            new int[81] {3, 0, 0, 5, 0, 0, 0, 0, 0,
                         0, 1, 0, 0, 0, 0, 0, 4, 2,
                         0, 0, 4, 0, 0, 0, 9, 0, 1,
                         0, 0, 0, 1, 0, 3, 0, 8, 0,
                         2, 0, 0, 0, 5, 0, 0, 0, 3,
                         0, 0, 0, 0, 0, 9, 0, 0, 0,
                         4, 7, 0, 0, 0, 0, 2, 0, 0,
                         0, 8, 0, 2, 0, 0, 0, 6, 0,
                         1, 0, 0, 3, 0, 0, 0, 0, 5,},

            new int[81] {3, 9, 2, 5, 4, 1, 8, 7, 6,
                         5, 1, 8, 6, 9, 7, 3, 4, 2,
                         7, 6, 4, 8, 3, 2, 9, 5, 1,
                         6, 5, 7, 1, 2, 3, 4, 8, 9,
                         2, 4, 9, 7, 5, 8, 6, 1, 3,
                         8, 3, 1, 4, 6, 9, 5, 2, 7,
                         4, 7, 5, 9, 1, 6, 2, 3, 8,
                         9, 8, 3, 2, 7, 5, 1, 6, 4,
                         1, 2, 6, 3, 8, 4, 7, 9, 5,}));

        // Rows 29
        // Hard, 5.5 mins, 4 stars
        data.Add(new SudokuData.SudokuBoardData(
            hard_titles[3], 4f,

            new int[81] {0, 0, 0, 0, 0, 0, 0, 0, 0,
                         4, 0, 5, 0, 0, 3, 2, 0, 0,
                         3, 0, 0, 0, 7, 0, 0, 8, 0,
                         0, 0, 0, 0, 0, 2, 0, 0, 1,
                         0, 0, 8, 0, 0, 0, 0, 0, 7,
                         0, 4, 0, 9, 1, 0, 0, 0, 0,
                         9, 0, 0, 0, 5, 0, 0, 0, 8,
                         1, 0, 0, 8, 0, 0, 5, 0, 0,
                         0, 0, 0, 0, 0, 4, 3, 2, 0,},

            new int[81] {8, 9, 2, 5, 4, 1, 7, 6, 3,
                         4, 7, 5, 6, 8, 3, 2, 1, 9,
                         3, 6, 1, 2, 7, 9, 4, 8, 5,
                         6, 5, 9, 7, 3, 2, 8, 4, 1,
                         2, 1, 8, 4, 6, 5, 9, 3, 7,
                         7, 4, 3, 9, 1, 8, 6, 5, 2,
                         9, 2, 4, 3, 5, 6, 1, 7, 8,
                         1, 3, 6, 8, 2, 7, 5, 9, 4,
                         5, 8, 7, 1, 9, 4, 3, 2, 6,}));

        // 13 Going on Flirty
        // Hard, 6 mins, 4.5 stars
        data.Add(new SudokuData.SudokuBoardData(
            hard_titles[4], 4.5f,

            new int[81] {0, 9, 0, 0, 1, 0, 0, 2, 0,
                         0, 0, 0, 5, 0, 0, 0, 0, 4,
                         6, 3, 0, 0, 0, 0, 0, 0, 5,
                         0, 0, 0, 0, 0, 2, 0, 0, 0,
                         0, 0, 0, 8, 0, 0, 0, 7, 0,
                         5, 0, 1, 0, 0, 0, 0, 0, 3,
                         0, 7, 0, 6, 3, 0, 0, 9, 0,
                         0, 0, 0, 0, 9, 0, 4, 8, 0,
                         0, 8, 0, 0, 0, 0, 0, 6, 0,},

            new int[81] {4, 9, 5, 7, 1, 3, 6, 2, 8,
                         8, 1, 2, 5, 6, 9, 7, 3, 4,
                         6, 3, 7, 2, 8, 4, 9, 1, 5,
                         7, 6, 8, 3, 4, 2, 1, 5, 9,
                         9, 4, 3, 8, 5, 1, 2, 7, 6,
                         5, 2, 1, 9, 7, 6, 8, 4, 3,
                         2, 7, 4, 6, 3, 8, 5, 9, 1,
                         3, 5, 6, 1, 9, 7, 4, 8, 2,
                         1, 8, 9, 4, 2, 5, 3, 6, 7,}));

        // Two Towers
        // Hard, uses two skyscrapers, 5 stars
        data.Add(new SudokuData.SudokuBoardData(
            hard_titles[5], 5f,

            new int[81] {0, 0, 0, 2, 0, 0, 9, 0, 3,
                         0, 0, 0, 0, 0, 0, 0, 0, 4,
                         0, 6, 4, 0, 8, 0, 0, 0, 0,
                         3, 0, 0, 9, 0, 0, 0, 0, 0,
                         0, 0, 0, 0, 2, 0, 5, 0, 0,
                         8, 1, 0, 6, 0, 4, 0, 2, 0,
                         0, 4, 0, 0, 0, 7, 0, 0, 0,
                         2, 0, 3, 0, 0, 0, 0, 1, 0,
                         1, 0, 0, 0, 9, 0, 0, 6, 0,},

            new int[81] {5, 8, 1, 2, 4, 6, 9, 7, 3,
                         7, 3, 2, 1, 5, 9, 6, 8, 4,
                         9, 6, 4, 7, 8, 3, 1, 5, 2,
                         3, 2, 6, 9, 7, 5, 8, 4, 1,
                         4, 7, 9, 8, 2, 1, 5, 3, 6,
                         8, 1, 5, 6, 3, 4, 7, 2, 9,
                         6, 4, 8, 3, 1, 7, 2, 9, 5,
                         2, 9, 3, 5, 6, 8, 4, 1, 7,
                         1, 5, 7, 4, 9, 2, 3, 6, 8,}));

        // Catfish Stew
        // Hard, uses swordfish, 5 stars
        data.Add(new SudokuData.SudokuBoardData(
            hard_titles[6], 5f,

            new int[81] {0, 6, 0, 0, 0, 0, 0, 0, 0,
                         5, 0, 7, 3, 0, 9, 0, 6, 0,
                         0, 0, 4, 2, 0, 0, 0, 3, 0,
                         1, 0, 0, 0, 5, 0, 0, 0, 0,
                         9, 0, 0, 0, 0, 0, 0, 4, 0,
                         0, 0, 0, 0, 1, 0, 0, 0, 8,
                         0, 0, 0, 8, 0, 0, 0, 0, 0,
                         0, 0, 3, 4, 0, 6, 0, 2, 0,
                         0, 0, 8, 0, 3, 0, 9, 0, 0,},

            new int[81] {3, 6, 1, 5, 4, 7, 2, 8, 9,
                         5, 2, 7, 3, 8, 9, 1, 6, 4,
                         8, 9, 4, 2, 6, 1, 5, 3, 7,
                         1, 8, 6, 7, 5, 4, 3, 9, 2,
                         9, 3, 5, 6, 2, 8, 7, 4, 1,
                         4, 7, 2, 9, 1, 3, 6, 5, 8,
                         6, 5, 9, 8, 7, 2, 4, 1, 3,
                         7, 1, 3, 4, 9, 6, 8, 2, 5,
                         2, 4, 8, 1, 3, 5, 9, 7, 6,}));

        return data;
    }
}

public class SudokuData : MonoBehaviour
{
    public static SudokuData Instance;

    public struct SudokuBoardData
    {
        public string title_data;
        public float difficulty_score;
        public int[] unsolved_data;
        public int[] solved_data;

        public SudokuBoardData(string title, float difficulty, int[] unsolved, int[] solved) : this()
        {
            this.title_data = title;
            this.difficulty_score = difficulty;
            this.unsolved_data = unsolved;
            this.solved_data = solved;
        }
    }

    public Dictionary<string, List<SudokuBoardData>> sudoku_game = new Dictionary<string, List<SudokuBoardData>>();
    
    void Awake()
    {
        if (Instance == null)
            Instance = this;
        else
            Destroy(this);
    }

    void Start()
    {
        sudoku_game.Add("EasySudoku", EasySudoku.getData());
        sudoku_game.Add("HardSudoku", HardSudoku.getData());
    }
}
